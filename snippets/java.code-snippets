{
    "Initialise collector": {
        "scope": "java",
        "prefix": "initCollector",
        "body": [
            "BatchEmitter emitter = BatchEmitter.builder()",
            "\t.url(\"${1:http://collector.com}\")",
            "\t.build();",
            "Tracker tracker = new Tracker",
            "\t.TrackerBuilder(emitter, \"${2:namespace}\", \"${3:appId}\")",
            "\t.build();"
        ]
    },
    "Set subject": {
        "scope": "java",
        "prefix": "setSubject",
        "body": [
            "Subject subject = new Subject.SubjectBuilder()",
            "\t.userId(\"${1:java@snowplowanalytics.com}\")",
            "\t.build();"
        ]
    },
    "Send structured event": {
        "scope": "java",
        "prefix": "sendStructuredEvent",
        "body": [
            "Structured structured = Structured.builder()",
            "\t.category(\"${1:category}\")",
            "\t.action(\"${2:action}\")",
            "\t.label(\"${3:label}\")",
            "\t.property(\"${4:property}\")",
            "\t.value(${5:12.34})",
            "\t.build();"
        ]
    },
    "Send self-describing JSON": {
        "scope": "java",
        "prefix": "sendSelfDescribingEvent",
        "body": [
            "// This map will be used for the \"data\" key",
            "Map<String, String> eventData = new HashMap<>();",
            "eventData.put(\"targetUrl\", \"${1:https://www.snowplowanalytics.com}\")",
            "",
            "// Wrap the map in a SelfDescribingJson",
            "// The specified schema allows for a String property \"targetUrl\"",
            "SelfDescribingJson sdj = new SelfDescribingJson(\"${2:iglu:com.example/example/jsonschema/1-0-0}\", eventData);"
        ]
    },
    "Timing": {
        "scope": "java",
        "prefix": "timing",
        "body": [
            "Timing timing = Timing.builder()",
            "\t.category(\"${1:category}\")",
            "\t.variable(\"${2:variable}\")",
            "\t.timing(${3:10}) // in milliseconds",
            "\t.label(\"${4:optional label}\")",
            "\t.build();"
        ]
    },
    "Screen view": {
        "scope": "java",
        "prefix": "screenView",
        "body": [
            "ScreenView screenView = ScreenView.builder()",
            "\t.name(\"${1:screen_name}\")",
            "\t.id(\"${2:screen_id}\")",
            "\t.build();"
        ]
    },
    "Ecommerce": {
        "scope": "java",
        "prefix": "ecommerce",
        "body": [
            ".price(${1:1.0})",
            "\t.quantity(${2:2})",
            "\t.name(\"${3:item name}\")",
            "\t.category(\"${4:category}\")",
            "\t.currency(\"${5:currency}\")",
            "\t.build();",
            "",
            "// Then make the EcommerceTransaction event",
            "EcommerceTransaction ecommerceTransaction = EcommerceTransaction.builder()",
            "\t.items(item) // Add the EcommerceTransactionItem events",
            "\t.orderId(\"${6:should be the same as item_id}\")",
            "\t.totalValue(${7:2.0})",
            "\t.affiliation(\"${8:affiliation}\")",
            "\t.taxValue(${9:2.0})",
            "\t.shipping(${10:3.0})",
            "\t.city(\"${11:city}\")",
            "\t.state(\"${12:state}\")",
            "\t.country(\"${13:country}\")",
            "\t.currency(\"${14:currency}\")",
            "\t.build();"
        ]
    }
}
