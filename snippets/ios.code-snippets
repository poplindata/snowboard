{
    "Initialise collector": {
        "scope": "swift,objectivec",
        "prefix": "initCollector",
        "body": [
            "let tracker = Snowplow.createTracker(namespace: \"${1:namespace}\", endpoint: ${2:com.collector}, method: .post)"
        ]
    },
    "Send structured event": {
        "scope": "swift,objectivec",
        "prefix": "sendStructuredEvent",
        "body": [
            "let event = Structured(category: \"${1:category}\", action: \"${2:action}\", label: \"${3:label}\")",
            "tracker.track(event)"
        ]
    },
    "Send self-describing JSON": {
        "scope": "swift,objectivec",
        "prefix": "sendSelfDescribingEvent",
        "body": [
            "let data = [\"a\": \"b\" as NSObject];",
            "let event = SelfDescribing(schema: \"${3:iglu:com.example/example/jsonschema/1-0-0}\", payload: data)",
            "tracker.track(event)"
        ]
    },
    "Timing": {
        "scope": "swift,objectivec",
        "prefix": "timing",
        "body": [
            "let event = Timing(category: \"${1:category}\", variable: \"${2:variable}\", timing: ${3:123})",
            "\t.label(\"${4:label}\")",
            "tracker.track(event)"
        ]
    },
    "Screen view": {
        "scope": "swift,objectivec",
        "prefix": "screenView",
        "body": [
            "let event = ScreenView(name: \"${1:screen_name}\", screenId: UUID())",
            "tracker.track(event)"
        ]
    },
    "Consent granted": {
        "scope": "swift,objectivec",
        "prefix": "consentGranted",
        "body": [
            "let event = ConsentGranted(expiry: \"${1:2022-01-01T00:00:00Z}\", documentId: \"${2:document_id}\", version: \"${3:1.1}\")",
            "\t.name(\"${4:document_name}\")",
            "\t.documentDescription(\"${5:description}\")",
            "",
            "tracker.track(event)"
        ]
    },
    "Consent withdrawn": {
        "scope": "swift,objectivec",
        "prefix": "consentWithdrawn",
        "body": [
            "let event = ConsentWithdrawn()",
            "\t.all(${1:true})",
            "\t.documentId(\"${2:1234abcd}\")",
            "\t.version(\"${3:1.1}\")       ",
            "\t.name(\"${4:document_name}\")",
            "\t.documentDescription(\"${5:description}\")",
            "",
            "tracker.track(event)"
        ]
    },
    "Ecommerce": {
        "scope": "swift,objectivec",
        "prefix": "ecommerce",
        "body": [
            "let transactionID = \"${1:6a8078be}\"",
            "",
            "let itemArray = [",
            "\tEcommerceItem(sku: \"${2:DemoItemSku}\", price: ${3:0.75}, quantity: ${4:1})",
            "\t\t.name(\"${5:DemoItemName}\")",
            "\t\t.category(\"${6:DemoItemCategory}\")",
            "\t\t.currency(\"${7:USD}\")",
            "]",
            "",
            "let event = Ecommerce(orderId: transactionID, totalValue: ${8:350}, items: itemArray)",
            "\t.affiliation(\"${9:DemoTransactionAffiliation}\")",
            "\t.taxValue(${10:10})",
            "\t.shipping(${11:15})",
            "\t.city(\"${12:Boston}\")",
            "\t.state(\"${13:Massachisetts}\")",
            "\t.country(\"${14:USA}\")",
            "\t.currency(\"${15:USD}\")",
            "tracker.track(event)"
        ]
    },
    "Deep Link": {
        "scope": "swift,objectivec",
        "prefix": "deepLink",
        "body": [
            "let deepLinkEvent = DeepLinkReceived(url: userActivity.webpageURL.absoluteString)"
        ]
    }
}
